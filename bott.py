import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8081264714:AAF2TrtHQPCqMFE7ZILufvEoRmcc4ZbO9oI"
CRYPTOBOT_API_KEY = "365909:AAtJ1Ee0m6tJGtWKfPY5jmmxx7XJZ4Cyz5E"
TUTORIAL_LINK = "https://docs.google.com/document/d/1qtZd3Iu5tFR1GUIiE3zTL9aCFP7cQ9FP0mUPXm1d-WU/edit?usp=sharing"
SCRIPT_PATH = "script.py"
ADMIN_ID = 7249427313
ADMIN_PASSWORD = "871289012038"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
user_ids = set()

# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–ø–∏–∞—Ä")]],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üîì –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–ø–∏–∞—Ä")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏")]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
class AdminState(StatesGroup):
    waiting_for_password = State()
    admin_authenticated = State()

# –§—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã
async def create_invoice(user_id: int):
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY}
    data = {
        "asset": "USDT",
        "amount": "1.78",  # üëà —Å—Ç—Ä–æ–∫–∞, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç API
        "description": "–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–ø–∏–∞—Ä–∞",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "openBot",
        "paid_btn_url": "https://t.me/AutoPiarKerral_bot",
        "payload": str(user_id)
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as resp:
            result = await resp.json()
            return result["result"]["pay_url"]

async def check_paid(user_id: int):
    url = "https://pay.crypt.bot/api/getInvoices"
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            result = await resp.json()
            for inv in result["result"]["items"]:
                if inv["status"] == "paid" and inv["payload"] == str(user_id):
                    return True
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user_ids.add(message.from_user.id)
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
        await state.set_state(AdminState.waiting_for_password)
    else:
        await message.answer("""
‚ò∫Ô∏è‚ò∫Ô∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —ç—Ç–æ –±–æ—Ç –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–ø–∏–∞—Ä–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π‚ò∫Ô∏è

üòá–°–µ–π—á–∞—Å –º—ã —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞—à–µ–≥–æ –∞–≤—Ç–æ–ø–∏–∞—Ä–∞üòá

‚ù§Ô∏è‚Äçüî•–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –±–∞–Ω–∞‚ù§Ô∏è‚Äçüî•
üëæ–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ 5 –º–∏–Ω—É—Çüëæ
‚úÖ–¢—É—Ç–æ—Ä–∏–∞–ª –∏ –≥–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ‚úÖ

üí≤–¶–µ–Ω–∞ ‚Äî –≤—Å–µ–≥–æ 150 –∏ 1.78 USDTüí≤
üî¥–¢—ã –æ–∫—É–ø–∞–µ—à—å —ç—Ç–æ —É–∂–µ —Å –ø–µ—Ä–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!üî¥

ü§ó–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Åü§ó

‚¨áÔ∏è–ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–ø–∏–∞—Ä‚¨áÔ∏èÔ∏è""", reply_markup=main_kb)

@dp.message(AdminState.waiting_for_password)
async def admin_check_password(message: types.Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.", reply_markup=admin_kb)
        await state.set_state(AdminState.admin_authenticated)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@dp.message(AdminState.admin_authenticated)
async def admin_panel(message: types.Message, state: FSMContext):
    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await message.answer(f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")
    elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    elif message.text == "üîì –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–ø–∏–∞—Ä":
        await message.answer("‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞–≤—Ç–æ–ø–∏–∞—Ä (–±–µ—Å–ø–ª–∞—Ç–Ω–æ).")
        await message.answer(f"üìò –¢—É—Ç–æ—Ä–∏–∞–ª: {TUTORIAL_LINK}")
        await message.answer_document(InputFile(SCRIPT_PATH))
    elif message.text == "üö™ –í—ã–π—Ç–∏":
        await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=main_kb)
        await state.clear()
    else:
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, message.text)
            except Exception:
                continue
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–ø–∏–∞—Ä")
async def buy(message: types.Message):
    url = await create_invoice(message.from_user.id)
    await message.answer(f"üí∏ –û–ø–ª–∞—Ç–∏ 1.78 USDT –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")

@dp.message(F.text.lower().contains("–æ–ø–ª–∞—Ç"))
async def check(message: types.Message):
    is_paid = await check_paid(message.from_user.id)
    if is_paid:
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞!")
        await message.answer(f"üìò –¢—É—Ç–æ—Ä–∏–∞–ª: {TUTORIAL_LINK}")
        await message.answer_document(InputFile(SCRIPT_PATH))
    else:
        await message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

